# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
python class for AVT camera with Vimba Driver
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyVimba', [dirname(__file__)])
        except ImportError:
            import _pyVimba
            return _pyVimba
        if fp is not None:
            try:
                _mod = imp.load_module('_pyVimba', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyVimba = swig_import_helper()
    del swig_import_helper
else:
    import _pyVimba
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


DEBUG_LEVEL = _pyVimba.DEBUG_LEVEL
FRAME_COUNT = _pyVimba.FRAME_COUNT

def Sleep(*args):
  return _pyVimba.Sleep(*args)
Sleep = _pyVimba.Sleep
class VimbaCamera(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VimbaCamera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VimbaCamera, name)
    __repr__ = _swig_repr
    __swig_setmethods__["__iDebugLevel"] = _pyVimba.VimbaCamera___iDebugLevel_set
    __swig_getmethods__["__iDebugLevel"] = _pyVimba.VimbaCamera___iDebugLevel_get
    if _newclass:__iDebugLevel = _swig_property(_pyVimba.VimbaCamera___iDebugLevel_get, _pyVimba.VimbaCamera___iDebugLevel_set)
    def __init__(self, *args): 
        this = _pyVimba.new_VimbaCamera(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyVimba.delete_VimbaCamera
    __del__ = lambda self : None;
    __swig_getmethods__["getAvailableCameras"] = lambda x: _pyVimba.VimbaCamera_getAvailableCameras
    if _newclass:getAvailableCameras = staticmethod(_pyVimba.VimbaCamera_getAvailableCameras)
    def currentCam(self): return _pyVimba.VimbaCamera_currentCam(self)
    def connect(self, *args): return _pyVimba.VimbaCamera_connect(self, *args)
    def disconnect(self): return _pyVimba.VimbaCamera_disconnect(self)
    def featuresList(self): return _pyVimba.VimbaCamera_featuresList(self)
    def hasFeature(self, *args): return _pyVimba.VimbaCamera_hasFeature(self, *args)
    def getFeature(self, *args): return _pyVimba.VimbaCamera_getFeature(self, *args)
    def setFeature(self, *args): return _pyVimba.VimbaCamera_setFeature(self, *args)
    def availablePixelFormats(self): return _pyVimba.VimbaCamera_availablePixelFormats(self)
    def grabStart(self): return _pyVimba.VimbaCamera_grabStart(self)
    def grabStop(self): return _pyVimba.VimbaCamera_grabStop(self)
    def getImage(self, timeout=5000): return _pyVimba.VimbaCamera_getImage(self, timeout)
    def getImage1(self, timeout=5000): return _pyVimba.VimbaCamera_getImage(self, timeout)
    __swig_getmethods__["setDebugLevel"] = lambda x: _pyVimba.VimbaCamera_setDebugLevel
    if _newclass:setDebugLevel = staticmethod(_pyVimba.VimbaCamera_setDebugLevel)
    __swig_getmethods__["debugLevel"] = lambda x: _pyVimba.VimbaCamera_debugLevel
    if _newclass:debugLevel = staticmethod(_pyVimba.VimbaCamera_debugLevel)
VimbaCamera_swigregister = _pyVimba.VimbaCamera_swigregister
VimbaCamera_swigregister(VimbaCamera)
cvar = _pyVimba.cvar

def VimbaCamera_getAvailableCameras(*args):
  return _pyVimba.VimbaCamera_getAvailableCameras(*args)
VimbaCamera_getAvailableCameras = _pyVimba.VimbaCamera_getAvailableCameras

def VimbaCamera_setDebugLevel(*args):
  return _pyVimba.VimbaCamera_setDebugLevel(*args)
VimbaCamera_setDebugLevel = _pyVimba.VimbaCamera_setDebugLevel

def VimbaCamera_debugLevel():
  return _pyVimba.VimbaCamera_debugLevel()
VimbaCamera_debugLevel = _pyVimba.VimbaCamera_debugLevel


def pyVimbaInitialize():
  return _pyVimba.pyVimbaInitialize()
pyVimbaInitialize = _pyVimba.pyVimbaInitialize

def pyVimbaShutdown():
  return _pyVimba.pyVimbaShutdown()
pyVimbaShutdown = _pyVimba.pyVimbaShutdown
# This file is compatible with both classic and new-style classes.


